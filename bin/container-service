#!/bin/bash

PROGNAME=${0##*/}
AZUREUSER=azureuser

usage()
{
  cat << EO
Usage: $PROGNAME [options]

Manage the Azure Mesos cluster.

Options:

Cluster Management
  --cache-fingerprints         cache the fingerprints on all nodes in cluster
  --list-agents                list the agents
  --list-masters               list the masters
  --refresh-cluster            re-interrogate the cluster for new machines

Agent Management
  --start-agents               start all agents
  --stop-agents                stop all agents
  --restart-agents             restart all agents
  --start-agent AGENT          start agent, where AGENT is the agent number as
                               an integer
  --stop-agent AGENT           stop agent, where AGENT is the agent number as
                               an integer
  --restart-agent AGENT        restart agent, where AGENT is the agent number
                               as an integer
  --exclude-agent AGENT        exclude agent from processing, where AGENT is the
                               agent number as an integer
  --scale-up AGENTCOUNT        scale up to the agent count
  --scale-down AGENTCOUNT      scale down to the agent count

Docker Management
  --docker-ps-agents           run docker ps on the agents
  --docker-pull-agents IMAGE   pre-pull the docker image
  --docker-pull-batchsize SIZE set a batch size for the concurrent pulls
                               otherwise there will be throttling (default 5)
  --docker-restart-agents      restart docker on all the agents
  --docker-restart-agent AGENT restart docker on all the agents

Marathon Management
  --create-marathon-app FILE  submit the marathon app where FILE is the .json
                              file describing the app

Other
  --help                      show this output
EO
}

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

ARGS=$(getopt -s bash -o h --longoptions help,cache-fingerprints,list-agents,list-masters,refresh-cluster,start-agents,stop-agents,restart-agents,start-agent:,stop-agent:,restart-agent:,exclude-agent:,scale-up:,scale-down:,docker-ps-agents,docker-pull-agents:,docker-pull-batchsize:,docker-restart-agents,docker-restart-agent:,create-marathon-app: --name $PROGNAME -- "$@")

if [ $? -ne 0 ] ; then
  usage
  exit 1
fi

eval set -- "$ARGS"

CACHEFINGERPRINTS=false
LISTAGENTS=false
LISTMASTERS=false
REFRESHCLUSTER=false
STARTAGENTS=false
STOPAGENTS=false
RESTARTAGENTS=false
STARTAGENT=false
STARTAGENTARGS=()
STOPAGENT=false
STOPAGENTARGS=()
RESTARTAGENT=false
RESTARTAGENTARGS=()
EXCLUDEAGENT=false
EXCLUDEAGENTARGS=()
SCALEUP=false
SCALEUPCOUNT=0
SCALEDOWN=false
SCALEDOWNCOUNT=0
DOCKERPSAGENTS=false
DOCKERPULLAGENTS=false
DOCKERPULLAGENTSARGS=()
DOCKERPULLBATCHSIZE=5
DOCKERRESTARTAGENTS=false
DOCKERRESTARTAGENT=false
DOCKERRESTARTAGENTARGS=()
CREATEMARATHONAPP=false
CREATEMARATHONAPPARGS=()

while true; do
  case $1 in
    -h|--help)
      usage
      exit 0
      ;;

    --cache-fingerprints)
      shift
      CACHEFINGERPRINTS=true
      ;;

    --list-agents)
      shift
      LISTAGENTS=true
      ;;

    --list-masters)
      shift
      LISTMASTERS=true
      ;;

    --refresh-cluster)
      shift
      REFRESHCLUSTER=true
      ;;

    --start-agents)
      shift
      STARTAGENTS=true
      ;;

    --stop-agents)
      shift
      STOPAGENTS=true
      ;;

    --restart-agents)
      shift
      RESTARTAGENTS=true
      ;;

    --start-agent)
      STARTAGENT=true
      if ! [ "$2" -eq "$2" ] 2>/dev/null ; then
        echo "ERROR: agent must be an integer"
        usage
        exit 1
      fi
      STARTAGENTARGS=("${STARTAGENTARGS[@]}" "$2")
      shift 2
      ;;

    --stop-agent)
      STOPAGENT=true
      if ! [ "$2" -eq "$2" ] 2>/dev/null ; then
        echo "ERROR: agent must be an integer"
        usage
        exit 1
      fi
      STOPAGENTARGS=("${STOPAGENTARGS[@]}" "$2")
      shift 2
      ;;

    --restart-agent)
      RESTARTAGENT=true
      if ! [ "$2" -eq "$2" ] 2>/dev/null ; then
        echo "ERROR: agent must be an integer"
        usage
        exit 1
      fi
      RESTARTAGENTARGS=("${RESTARTAGENTARGS[@]}" "$2")
      shift 2
      ;;

    --exclude-agent)
      EXCLUDEAGENT=true
      if ! [ "$2" -eq "$2" ] 2>/dev/null ; then
        echo "ERROR: agent must be an integer"
        usage
        exit 1
      fi
      EXCLUDEAGENTARGS=("${EXCLUDEAGENTARGS[@]}" "$2")
      shift 2
      ;;

    --scale-up)
      SCALEUP=true
      SCALEUPCOUNT=$2
      shift 2
      ;;

    --scale-down)
      SCALEDOWN=true
      SCALEDOWNCOUNT=$2
      shift 2
      ;;

    --docker-ps-agents)
      shift
      DOCKERPSAGENTS=true
      ;;

    --docker-pull-agents)
      DOCKERPULLAGENTS=true
      DOCKERPULLAGENTSARGS=("${DOCKERPULLAGENTSARGS[@]}" "$2")
      shift 2
      ;;

    --docker-pull-batchsize)
      if ! [ "$2" -eq "$2" ] 2>/dev/null || [ "$2" -le "0" ] ; then
        echo "ERROR: batch size must be an integer greater than 0"
        usage
        exit 1
      fi
      DOCKERPULLBATCHSIZE="$2"
      shift 2
      ;;

    --docker-restart-agents)
      shift
      DOCKERRESTARTAGENTS=true
      ;;

    --docker-restart-agent)
      DOCKERRESTARTAGENT=true
      if ! [ "$2" -eq "$2" ] 2>/dev/null ; then
        echo "ERROR: agent must be an integer"
        usage
        exit 1
      fi
      DOCKERRESTARTAGENTARGS=("${DOCKERRESTARTAGENTARGS[@]}" "$2")
      shift 2
      ;;

    --create-marathon-app)
      CREATEMARATHONAPP=true
      CREATEMARATHONAPPARGS=("${CREATEMARATHONAPPARGS[@]}" "$2")
      shift 2
      ;;

    --)
      shift
      break
      ;;

    *)
      echo "ERROR: invalid argument or missing parameter for $1"
      usage
      exit 1
  esac
done

getnodes() {
  if [ -e .nodes ] ; then
    cat .nodes
  else
    >&2 echo "retrieving list of nodes . . ."
    local -a arr=()
    RESULTS="$(nmap -sn 10.0.0.0/25 | grep report | awk '{print $5}')"
    while read -r line ; do
      arr=("${arr[@]}" "$line")
    done <<< "$RESULTS"
    local nodesString=$(declare -p arr | sed -e 's/^declare -a arr=//' | tee .nodes)
    local -a nodes=()
    eval "declare -a nodes=${nodesString}"
    >&2 echo found ${#nodes[@]} nodes
    echo $nodesString
  fi
}

getagents() {
  if [ -e .agents ] ; then
    cat .agents
  else
    >&2 echo discovering agents . . .
    local -a nodes=( "$@" )
    local -a arr=()
    for node in "${nodes[@]}"; do
      if ssh ${AZUREUSER}@$node test -e /etc/mesos-slave/hostname < /dev/null ; then
        arr=("${arr[@]}" "$node")
      fi
    done
    local agentsString=$(declare -p arr | sed -e 's/^declare -a arr=//' | tee .agents)
    local -a agents=()
    eval "declare -a agents=${agentsString}"
    >&2 echo found ${#agents[@]} agents
    echo $agentsString
  fi
}

getmasters() {
  if [ -e .masters ] ; then
    cat .masters
  else
    >&2 echo discovering masters . . .
    local -a nodes=( "$@" )
    local -a arr=()
    for node in "${nodes[@]}"; do
      if ssh ${AZUREUSER}@$node test -e /etc/mesos-master/hostname < /dev/null ; then
        arr=("${arr[@]}" "$node")
      fi
    done
    local mastersString=$(declare -p arr | sed -e 's/^declare -a arr=//' | tee .masters)
    local -a masters=()
    eval "declare -a masters=${mastersString}"
    >&2 echo found ${#masters[@]} masters
    echo $mastersString
  fi
}

cache-fingerprints() {
  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  for node in "${nodes[@]}"; do
    echo adding $node fingerprint to ~/.ssh/known_hosts
    `ssh-keyscan -H $node >> ~/.ssh/known_hosts`
  done
}
if [ "$CACHEFINGERPRINTS" = true ] ; then
  cache-fingerprints
  exit 0
fi

agent-running() {
  declare agentString=("$1")
  if ssh ${AZUREUSER}@$agentString "ps ax | grep mesos-slave | grep -v grep" < /dev/null ; then
    return 0
  else
    return 1
  fi
}

master-running() {
  declare agentString=("$1")
  if ssh ${AZUREUSER}@$agentString "ps ax | grep mesos-master | grep -v grep" < /dev/null ; then
    return 0
  else
    return 1
  fi
}

master-leader() {
  declare agentString=("$1")
  result=$(wget -O- http://${agentString}:5050/master/state-summary 2> /dev/null | jq -r .frameworks[0])
  if [ "$result" = "null" ] ; then
    echo
  else
    echo "leader"
  fi
}

list-agents()
{
  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local -a agents=()
  eval "declare -a agents=${agentsString}"

  local counter=1
  for agent in "${agents[@]}"; do
    if [ "$(agent-running $agent)" ] ; then
      echo agent $counter $agent started
    else
      echo agent $counter $agent stopped
    fi
    counter=$[$counter +1]
  done
}
if [ "$LISTAGENTS" = true ] ; then
  list-agents
  exit 0
fi

list-masters()
{
  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local mastersstring="$(getmasters "${nodes[@]}")"
  local -a masters=()
  eval "declare -a masters=${mastersstring}"

  local counter=1
  for master in "${masters[@]}"; do
    if [ "$(master-running $master)" ] ; then
      echo -n master $counter $master started
    else
      echo -n master $counter $master stopped
    fi
    if [ "$(master-leader $master)" ] ; then
      echo " leader "
    else
      echo
    fi
    counter=$[$counter +1]
  done
}
if [ "$LISTMASTERS" = true ] ; then
  list-masters
  exit 0
fi

refresh-cluster() {
  echo "refreshing cluster . . ."
  rm -f .nodes .agents .masters
  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local mastersString="$(getmasters "${nodes[@]}")"
  echo "refresh complete"
}
if [ "$REFRESHCLUSTER" = true ] ; then
  refresh-cluster
  exit 0
fi

service-agents() {
  declare -a excludeAgents=("${!1}")
  declare action=("$2")
  echo "$action agents called"
  echo "excluding agents ${excludeAgents[@]}"

  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local -a agents=()
  eval "declare -a agents=${agentsString}"

  # setup the exclude array
  local -a excludeArray=()
  # add a dummy entry to take up agent 0
  excludeArray=("${excludeArray[@]}" false)
  for i in $(seq 1 ${#agents[@]}); do
    excludeArray=("${excludeArray[@]}" false)
  done
  for agent in "${excludeAgents[@]}"; do
    if [ "$agent" -gt 0 ] && [ "$agent" -le "${#agents[@]}" ] ; then
      echo "excluding $agent"
      excludeArray[$agent]=true
    else
      echo "ignoring invalid agent $agent"
    fi
  done

  local hostString=""
  local counter=1
  for agent in "${agents[@]}"; do
    if [ "${excludeArray[$counter]}" = false ] ; then
      if [ "$action" = "start" ] && [ "$(agent-running $agent)" ] ; then
        echo agent $agent is already running
      elif [ "$action" = "stop" ] && ! [ "$(agent-running $agent)" ] ; then
        echo agent $agent is already stopped
      else
        hostString="$hostString -H $AZUREUSER@$agent"
      fi
    else
      echo "excluding agent $counter" $agent
    fi
    counter=$[$counter +1]
  done
  if [ "$hostString" = "" ] ; then
    echo "there are no agents to $action"
    return 0
  fi

  echo calling ${action} on agents in parallel

  pssh -i $hostString "sudo service mesos-slave $action"
}
if [ "$STARTAGENTS" = true ] ; then
  service-agents EXCLUDEAGENTARGS[@] "start"
  exit 0
fi

if [ "$STOPAGENTS" = true ] ; then
  service-agents EXCLUDEAGENTARGS[@] "stop"
  exit 0
fi

if [ "$RESTARTAGENTS" = true ] ; then
  service-agents EXCLUDEAGENTARGS[@] "restart"
  exit 0
fi

service-agent()
{
  declare -a stopAgents=("${!1}")
  declare action=("$2")
  echo "$action agent on agents ${stopAgents[@]}"

  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local -a agents=()
  eval "declare -a agents=${agentsString}"

  # setup the exclude array
  local -a excludeArray=()
  # add a dummy entry to take up agent 0
  excludeArray=("${excludeArray[@]}" true)
  for i in $(seq 1 ${#agents[@]}); do
    excludeArray=("${excludeArray[@]}" true)
  done
  for agent in "${stopAgents[@]}"; do
    if [ "$agent" -gt 0 ] && [ "$agent" -le "${#agents[@]}" ] ; then
      excludeArray[$agent]=false
    else
      echo "ignoring invalid agent $agent"
    fi
  done

  local hostString=""
  local counter=1
  for agent in "${agents[@]}"; do
    if [ "${excludeArray[$counter]}" = false ] ; then
      if [ "$action" = "start" ] && [ "$(agent-running $agent)" ] ; then
        echo agent $agent is already running
      elif [ "$action" = "stop" ] && ! [ "$(agent-running $agent)" ] ; then
        echo agent $agent is already stopped
      else
        hostString="$hostString -H $AZUREUSER@$agent"
        echo "including agent $counter $agent"
      fi
    fi
    counter=$[$counter +1]
  done
  if [ "$hostString" = "" ] ; then
    echo "there are no agents to $action"
    return 0
  fi

  echo calling ${action} on agents in parallel

  pssh -i $hostString "sudo service mesos-slave $action"
}
if [ "$STOPAGENT" = true ] ; then
  service-agent STOPAGENTARGS[@] "stop"
  exit 0
fi
if [ "$STARTAGENT" = true ] ; then
  service-agent STARTAGENTARGS[@] "start"
  exit 0
fi
if [ "$RESTARTAGENT" = true ] ; then
  service-agent RESTARTAGENTARGS[@] "restart"
  exit 0
fi

scale-up()
{
  declare scaleUpCount=("$1")
  echo "scale up to $scaleUpCount"
  declare -a excludeAgents=("${!2}")
  echo "excluding agents ${excludeAgents[@]}"

  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local -a agents=()
  eval "declare -a agents=${agentsString}"

  # setup the exclude array
  local -a excludeArray=()
  # add a dummy entry to take up agent 0
  excludeArray=("${excludeArray[@]}" false)
  for i in $(seq 1 ${#agents[@]}); do
    excludeArray=("${excludeArray[@]}" false)
  done
  # exclude the explicitly excluded agents
  for agent in "${excludeAgents[@]}"; do
    if [ "$agent" -gt 0 ] && [ "$agent" -le "${#agents[@]}" ] ; then
      echo "excluding $agent"
      excludeArray[$agent]=true
    else
      echo "ignoring invalid agent $agent"
    fi
  done
  local hostString=""
  local counter=0
  for agent in "${agents[@]}"; do
    counter=$[$counter +1]
    if [ "${excludeArray[$counter]}" = false ] && ! [ "$(agent-running $agent)" ] ; then
      hostString="$hostString -H $AZUREUSER@$agent"
    else
      echo "excluding agent $counter" $agent, since already running or explictly excluded
    fi
    if [ "$counter" -eq "$scaleUpCount" ] ; then
      echo "breaking out" $counter $scaleUpCount
      break;
    fi
  done
  if [ "$hostString" = "" ] ; then
    echo "there are no agents to start"
    return 0
  fi

  echo now starting agents to scale to $counter
  pssh -i $hostString "sudo service mesos-slave start"
  echo completed scaling to $counter agents
}
if [ "$SCALEUP" = true ] ; then
  scale-up $SCALEUPCOUNT EXCLUDEAGENTARGS[@]
  exit 0
fi

scale-down()
{
  declare scaleDownCount=("$1")
  echo "scale down to $scaleDownCount"
  declare -a excludeAgents=("${!2}")
  echo "excluding agents ${excludeAgents[@]}"

  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local -a agents=()
  eval "declare -a agents=${agentsString}"

  # setup the exclude array
  local -a excludeArray=()
  # add a dummy entry to take up agent 0
  excludeArray=("${excludeArray[@]}" false)
  for i in $(seq 1 ${#agents[@]}); do
    excludeArray=("${excludeArray[@]}" false)
  done
  # exclude the explicitly excluded agents
  for agent in "${excludeAgents[@]}"; do
    if [ "$agent" -gt 0 ] && [ "$agent" -le "${#agents[@]}" ] ; then
      echo "excluding $agent"
      excludeArray[$agent]=true
    else
      echo "ignoring invalid agent $agent"
    fi
  done
  local hostString=""
  local counter=0
  for agent in "${agents[@]}"; do
    counter=$[$counter +1]
    if [ "$counter" -le "$scaleDownCount" ] ; then
      continue
    fi
    if [ "${excludeArray[$counter]}" = false ] && [ "$(agent-running $agent)" ] ; then
      hostString="$hostString -H $AZUREUSER@$agent"
    else
      echo "excluding agent $counter" $agent, since already stopped or explictly excluded
    fi
  done
  if [ "$hostString" = "" ] ; then
    echo "there are no agents to stop"
    return 0
  fi

  echo now stopping agents to scale down to $scaleDownCount
  pssh -i $hostString "sudo service mesos-slave stop"
  echo completed scaling to $scaleDownCount agents
}
if [ "$SCALEDOWN" = true ] ; then
  scale-down $SCALEDOWNCOUNT EXCLUDEAGENTARGS[@]
  exit 0
fi

docker-pull-agents()
{
  declare -a dockerImageArgs=("${!1}")
  declare batchSize=("$2")
  echo "pull docker images ${dockerImageArgs[@]} with batchsize of $batchSize"

  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local -a agents=()
  eval "declare -a agents=${agentsString}"

  local counter=0
  local batchRun=false
  local hostString=""
  for dockerImage in "${dockerImageArgs[@]}"; do
    echo pull docker image $dockerImage on agents with max concurrent pulls of $batchSize

    counter=0
    hostString=""
    while [ "$counter" -lt "${#agents[@]}" ] ; do
      hostString="$hostString -H $AZUREUSER@${agents[$counter]}"
      counter=$[$counter +1]

      if [ "$(($counter%$batchSize))" -eq "0" ] ; then
        echo pssh -t 0 -i $hostString "sudo docker pull $dockerImage"
        pssh -t 0 -i $hostString "sudo docker pull $dockerImage"
        hostString=""
      fi
    done
    if ! [ "$hostString" = "" ] ; then
      echo pssh -t 0 -i $hostString "sudo docker pull $dockerImage"
      pssh -t 0 -i $hostString "sudo docker pull $dockerImage"
    fi
  done
}
if [ "$DOCKERPULLAGENTS" = true ] ; then
  docker-pull-agents DOCKERPULLAGENTSARGS[@] $DOCKERPULLBATCHSIZE
  exit 0
fi

docker-ps-agents()
{
  echo "retrieve docker processes on all agents"

  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local -a agents=()
  eval "declare -a agents=${agentsString}"

  local hostString=""
  for agent in "${agents[@]}"; do
    hostString="$hostString -H $AZUREUSER@$agent"
  done
  if [ "$hostString" = "" ] ; then
    echo "there are no agents to $action"
    return 0
  fi

  pssh -t 0 -i $hostString "sudo docker ps"
}
if [ "$DOCKERPSAGENTS" = true ] ; then
  docker-ps-agents
  exit 0
fi

docker-restart-agents()
{
  echo "restart docker on all agents"

  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local -a agents=()
  eval "declare -a agents=${agentsString}"

  local hostString=""
  for agent in "${agents[@]}"; do
    hostString="$hostString -H $AZUREUSER@$agent"
  done
  if [ "$hostString" = "" ] ; then
    echo "there are no agents to $action"
    return 0
  fi

  pssh -t 0 -i $hostString "sudo service docker restart"
}
if [ "$DOCKERRESTARTAGENTS" = true ] ; then
  docker-restart-agents
  exit 0
fi

docker-restart-agent()
{
  declare -a restartAgents=("${!1}")
  echo "restarting docker service on agents ${restartAgents[@]}"

  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local agentsString="$(getagents "${nodes[@]}")"
  local -a agents=()
  eval "declare -a agents=${agentsString}"

  # setup the exclude array
  local -a excludeArray=()
  # add a dummy entry to take up agent 0
  excludeArray=("${excludeArray[@]}" true)
  for i in $(seq 1 ${#agents[@]}); do
    excludeArray=("${excludeArray[@]}" true)
  done
  for agent in "${restartAgents[@]}"; do
    if [ "$agent" -gt 0 ] && [ "$agent" -le "${#agents[@]}" ] ; then
      excludeArray[$agent]=false
    else
      echo "ignoring invalid agent $agent"
    fi
  done

  local hostString=""
  local counter=1
  for agent in "${agents[@]}"; do
    if [ "${excludeArray[$counter]}" = false ] ; then
      hostString="$hostString -H $AZUREUSER@$agent"
      echo "including agent $counter $agent"
    fi
    counter=$[$counter +1]
  done
  if [ "$hostString" = "" ] ; then
    echo "there are no agents to docker restart"
    return 0
  fi
  echo calling restart on agents in parallel
  pssh -t 0 -i $hostString "sudo service docker restart"
}
if [ "$DOCKERRESTARTAGENT" = true ] ; then
  docker-restart-agent DOCKERRESTARTAGENTARGS[@]
  exit 0
fi

create-marathon-app()
{
  declare -a marathonfiles=("${!1}")
  echo "submitting the following marathon apps ${marathonfiles[@]}"

  local nodesString="$(getnodes)"
  local -a nodes=()
  eval "declare -a nodes=${nodesString}"

  local mastersstring="$(getmasters "${nodes[@]}")"
  local -a masters=()
  eval "declare -a masters=${mastersstring}"

  if [ "${#masters[@]}" -eq "0" ] ; then
    echo there are no masters, exiting . . .
    return 1
  fi

  #find the master hosting the leading marathon framework
  marathonEndpoint=""
  for master in "${masters[@]}"; do
    result=$(wget -O- http://${master}:5050/master/state-summary 2> /dev/null | jq -r '.frameworks[] | select(.name == "marathon").webui_url')

    if [ "$result" ] ; then
      marathonEndpoint=$result
      break
    fi
  done

  if ! [ "$marathonEndpoint" ] ; then
    echo "ERROR: could not find a marathon endpoint"
    return 1
  fi
  echo found $marathonEndpoint as marathon leader endpoint

  for jsonFile in "${marathonfiles[@]}"; do
    if [ -e $jsonFile ] ; then
      echo curl -X POST $marathonEndpoint/v2/groups -d @$jsonFile -H "Content-type: application/json"
      curl -X POST $marathonEndpoint/v2/groups -d @$jsonFile -H "Content-type: application/json"
    else
      echo ERROR: file $jsonFile does not exist, unable to submit
    fi
  done
}
if [ "$CREATEMARATHONAPP" = true ] ; then
  create-marathon-app CREATEMARATHONAPPARGS[@]
  exit 0
fi
